#BlueJ class context
comment0.target=StdRandom
comment0.text=\r\n\ \ <p><b>Overview.</b>\r\n\ \ The\ {@code\ StdRandom}\ class\ provides\ static\ methods\ for\ generating\r\n\ \ random\ number\ from\ various\ discrete\ and\ continuous\ distributions,\r\n\ \ including\ uniform,\ Bernoulli,\ geometric,\ Gaussian,\ exponential,\ Pareto,\r\n\ \ Poisson,\ and\ Cauchy.\ It\ also\ provides\ method\ for\ shuffling\ an\r\n\ \ array\ or\ subarray\ and\ generating\ random\ permutations.\r\n\r\n\ \ <p><b>Conventions.</b>\r\n\ \ By\ convention,\ all\ intervals\ are\ half\ open.\ For\ example,\r\n\ \ <code>uniformDouble(-1.0,\ 1.0)</code>\ returns\ a\ random\ number\ between\r\n\ \ <code>-1.0</code>\ (inclusive)\ and\ <code>1.0</code>\ (exclusive).\r\n\ \ Similarly,\ <code>shuffle(a,\ lo,\ hi)</code>\ shuffles\ the\ <code>hi\ -\ lo</code>\r\n\ \ elements\ in\ the\ array\ <code>a[]</code>,\ starting\ at\ index\ <code>lo</code>\r\n\ \ (inclusive)\ and\ ending\ at\ index\ <code>hi</code>\ (exclusive).\r\n\r\n\ \ <p><b>Performance.</b>\r\n\ \ The\ methods\ all\ take\ constant\ expected\ time,\ except\ those\ that\ involve\ arrays.\r\n\ \ The\ <em>shuffle</em>\ method\ takes\ time\ linear\ in\ the\ subarray\ to\ be\ shuffled;\r\n\ \ the\ <em>discrete</em>\ methods\ take\ time\ linear\ in\ the\ length\ of\ the\ argument\r\n\ \ array.\r\n\r\n\ \ <p><b>Additional\ information.</b>\r\n\ \ For\ additional\ documentation,\r\n\ \ see\ <a\ href\="https\://introcs.cs.princeton.edu/22library">Section\ 2.2</a>\ of\r\n\ \ <i>Computer\ Science\:\ An\ Interdisciplinary\ Approach</i>\r\n\ \ by\ Robert\ Sedgewick\ and\ Kevin\ Wayne.\r\n\r\n\ \ @author\ Robert\ Sedgewick\r\n\ \ @author\ Kevin\ Wayne\r\n
comment1.params=
comment1.target=StdRandom()
comment10.params=
comment10.target=double\ random()
comment10.text=\r\n\ Returns\ a\ random\ real\ number\ uniformly\ in\ [0,\ 1).\r\n\r\n\ @return\ \ \ \ \ a\ random\ real\ number\ uniformly\ in\ [0,\ 1)\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformDouble()}.\r\n
comment11.params=a\ b
comment11.target=int\ uniform(int,\ int)
comment11.text=\r\n\ Returns\ a\ random\ integer\ uniformly\ in\ [a,\ b).\r\n\r\n\ @param\ \ a\ the\ left\ endpoint\r\n\ @param\ \ b\ the\ right\ endpoint\r\n\ @return\ a\ random\ integer\ uniformly\ in\ [a,\ b)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ b\ <\=\ a}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ b\ -\ a\ >\=\ Integer.MAX_VALUE}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformInt(int\ a,\ int\ b)}.\r\n
comment12.params=a\ b
comment12.target=int\ uniformInt(int,\ int)
comment12.text=\r\n\ Returns\ a\ random\ integer\ uniformly\ in\ [a,\ b).\r\n\r\n\ @param\ \ a\ the\ left\ endpoint\r\n\ @param\ \ b\ the\ right\ endpoint\r\n\ @return\ a\ random\ integer\ uniformly\ in\ [a,\ b)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ b\ <\=\ a}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ b\ -\ a\ >\=\ Integer.MAX_VALUE}\r\n
comment13.params=a\ b
comment13.target=double\ uniform(double,\ double)
comment13.text=\r\n\ Returns\ a\ random\ real\ number\ uniformly\ in\ [a,\ b).\r\n\r\n\ @param\ \ a\ the\ left\ endpoint\r\n\ @param\ \ b\ the\ right\ endpoint\r\n\ @return\ a\ random\ real\ number\ uniformly\ in\ [a,\ b)\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ a\ <\ b}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformDouble(double\ a,\ double\ b)}.\r\n
comment14.params=a\ b
comment14.target=double\ uniformDouble(double,\ double)
comment14.text=\r\n\ Returns\ a\ random\ real\ number\ uniformly\ in\ [a,\ b).\r\n\r\n\ @param\ \ a\ the\ left\ endpoint\r\n\ @param\ \ b\ the\ right\ endpoint\r\n\ @return\ a\ random\ real\ number\ uniformly\ in\ [a,\ b)\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ a\ <\ b}\r\n
comment15.params=p
comment15.target=boolean\ bernoulli(double)
comment15.text=\r\n\ Returns\ a\ random\ boolean\ from\ a\ Bernoulli\ distribution\ with\ success\r\n\ probability\ <em>p</em>.\r\n\r\n\ @param\ \ p\ the\ probability\ of\ returning\ {@code\ true}\r\n\ @return\ {@code\ true}\ with\ probability\ {@code\ p}\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ with\ probability\ {@code\ 1\ -\ p}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0}\ &le;\ {@code\ p}\ &le;\ {@code\ 1.0}\r\n
comment16.params=
comment16.target=boolean\ bernoulli()
comment16.text=\r\n\ Returns\ a\ random\ boolean\ from\ a\ Bernoulli\ distribution\ with\ success\r\n\ probability\ 1/2.\r\n\r\n\ @return\ {@code\ true}\ with\ probability\ 1/2\ and\r\n\ \ \ \ \ \ \ \ \ {@code\ false}\ with\ probability\ 1/2\r\n
comment17.params=
comment17.target=double\ gaussian()
comment17.text=\r\n\ Returns\ a\ random\ real\ number\ from\ a\ standard\ Gaussian\ distribution.\r\n\r\n\ @return\ a\ random\ real\ number\ from\ a\ standard\ Gaussian\ distribution\r\n\ \ \ \ \ \ \ \ \ (mean\ 0\ and\ standard\ deviation\ 1).\r\n
comment18.params=mu\ sigma
comment18.target=double\ gaussian(double,\ double)
comment18.text=\r\n\ Returns\ a\ random\ real\ number\ from\ a\ Gaussian\ distribution\ with\ mean\ &mu;\r\n\ and\ standard\ deviation\ &sigma;.\r\n\r\n\ @param\ \ mu\ the\ mean\r\n\ @param\ \ sigma\ the\ standard\ deviation\r\n\ @return\ a\ real\ number\ distributed\ according\ to\ the\ Gaussian\ distribution\r\n\ \ \ \ \ \ \ \ \ with\ mean\ {@code\ mu}\ and\ standard\ deviation\ {@code\ sigma}\r\n
comment19.params=p
comment19.target=int\ geometric(double)
comment19.text=\r\n\ Returns\ a\ random\ integer\ from\ a\ geometric\ distribution\ with\ success\r\n\ probability\ <em>p</em>.\r\n\ The\ integer\ represents\ the\ number\ of\ independent\ trials\r\n\ before\ the\ first\ success.\r\n\r\n\ @param\ \ p\ the\ parameter\ of\ the\ geometric\ distribution\r\n\ @return\ a\ random\ integer\ from\ a\ geometric\ distribution\ with\ success\r\n\ \ \ \ \ \ \ \ \ probability\ {@code\ p};\ or\ {@code\ Integer.MAX_VALUE}\ if\r\n\ \ \ \ \ \ \ \ \ {@code\ p}\ is\ (nearly)\ equal\ to\ {@code\ 1.0}.\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ p\ >\=\ 0.0}\ and\ {@code\ p\ <\=\ 1.0}\r\n
comment2.params=s
comment2.target=void\ setSeed(long)
comment2.text=\r\n\ Sets\ the\ seed\ of\ the\ pseudo-random\ number\ generator.\r\n\ This\ method\ enables\ you\ to\ produce\ the\ same\ sequence\ of\ "random"\r\n\ number\ for\ each\ execution\ of\ the\ program.\r\n\ Ordinarily,\ you\ should\ call\ this\ method\ at\ most\ once\ per\ program.\r\n\r\n\ @param\ s\ the\ seed\r\n
comment20.params=lambda
comment20.target=int\ poisson(double)
comment20.text=\r\n\ Returns\ a\ random\ integer\ from\ a\ Poisson\ distribution\ with\ mean\ &lambda;.\r\n\r\n\ @param\ \ lambda\ the\ mean\ of\ the\ Poisson\ distribution\r\n\ @return\ a\ random\ integer\ from\ a\ Poisson\ distribution\ with\ mean\ {@code\ lambda}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ lambda\ >\ 0.0}\ and\ not\ infinite\r\n
comment21.params=
comment21.target=double\ pareto()
comment21.text=\r\n\ Returns\ a\ random\ real\ number\ from\ the\ standard\ Pareto\ distribution.\r\n\r\n\ @return\ a\ random\ real\ number\ from\ the\ standard\ Pareto\ distribution\r\n
comment22.params=alpha
comment22.target=double\ pareto(double)
comment22.text=\r\n\ Returns\ a\ random\ real\ number\ from\ a\ Pareto\ distribution\ with\r\n\ shape\ parameter\ &alpha;.\r\n\r\n\ @param\ \ alpha\ shape\ parameter\r\n\ @return\ a\ random\ real\ number\ from\ a\ Pareto\ distribution\ with\ shape\r\n\ \ \ \ \ \ \ \ \ parameter\ {@code\ alpha}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ alpha\ >\ 0.0}\r\n
comment23.params=
comment23.target=double\ cauchy()
comment23.text=\r\n\ Returns\ a\ random\ real\ number\ from\ the\ Cauchy\ distribution.\r\n\r\n\ @return\ a\ random\ real\ number\ from\ the\ Cauchy\ distribution.\r\n
comment24.params=probabilities
comment24.target=int\ discrete(double[])
comment24.text=\r\n\ Returns\ a\ random\ integer\ from\ the\ specified\ discrete\ distribution.\r\n\r\n\ @param\ \ probabilities\ the\ probability\ of\ occurrence\ of\ each\ integer\r\n\ @return\ a\ random\ integer\ from\ a\ discrete\ distribution\:\r\n\ \ \ \ \ \ \ \ \ {@code\ i}\ with\ probability\ {@code\ probabilities[i]}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ probabilities}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ sum\ of\ array\ entries\ is\ not\ (very\ nearly)\ equal\ to\ {@code\ 1.0}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ probabilities[i]\ >\=\ 0.0}\ for\ each\ index\ {@code\ i}\r\n
comment25.params=frequencies
comment25.target=int\ discrete(int[])
comment25.text=\r\n\ Returns\ a\ random\ integer\ from\ the\ specified\ discrete\ distribution.\r\n\r\n\ @param\ \ frequencies\ the\ frequency\ of\ occurrence\ of\ each\ integer\r\n\ @return\ a\ random\ integer\ from\ a\ discrete\ distribution\:\r\n\ \ \ \ \ \ \ \ \ {@code\ i}\ with\ probability\ proportional\ to\ {@code\ frequencies[i]}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ frequencies}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ if\ all\ array\ entries\ are\ {@code\ 0}\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ frequencies[i]}\ is\ negative\ for\ any\ index\ {@code\ i}\r\n\ @throws\ IllegalArgumentException\ if\ sum\ of\ frequencies\ exceeds\ {@code\ Integer.MAX_VALUE}\ (2<sup>31</sup>\ -\ 1)\r\n
comment26.params=lambda
comment26.target=double\ exp(double)
comment26.text=\r\n\ Returns\ a\ random\ real\ number\ from\ an\ exponential\ distribution\r\n\ with\ rate\ &lambda;.\r\n\r\n\ @param\ \ lambda\ the\ rate\ of\ the\ exponential\ distribution\r\n\ @return\ a\ random\ real\ number\ from\ an\ exponential\ distribution\ with\r\n\ \ \ \ \ \ \ \ \ rate\ {@code\ lambda}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ lambda\ >\ 0.0}\r\n
comment27.params=a
comment27.target=void\ shuffle(java.lang.Object[])
comment27.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ array\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n
comment28.params=a
comment28.target=void\ shuffle(double[])
comment28.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ array\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n
comment29.params=a
comment29.target=void\ shuffle(int[])
comment29.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ array\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n
comment3.params=
comment3.target=long\ getSeed()
comment3.text=\r\n\ Returns\ the\ seed\ of\ the\ pseudo-random\ number\ generator.\r\n\r\n\ @return\ the\ seed\r\n
comment30.params=a
comment30.target=void\ shuffle(char[])
comment30.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ array\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n
comment31.params=a\ lo\ hi
comment31.target=void\ shuffle(java.lang.Object[],\ int,\ int)
comment31.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ subarray\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @param\ \ lo\ the\ left\ endpoint\ (inclusive)\r\n\ @param\ \ hi\ the\ right\ endpoint\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ (0\ <\=\ lo)\ &&\ (lo\ <\ hi)\ &&\ (hi\ <\=\ a.length)}\r\n\r\n
comment32.params=a\ lo\ hi
comment32.target=void\ shuffle(double[],\ int,\ int)
comment32.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ subarray\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @param\ \ lo\ the\ left\ endpoint\ (inclusive)\r\n\ @param\ \ hi\ the\ right\ endpoint\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ (0\ <\=\ lo)\ &&\ (lo\ <\ hi)\ &&\ (hi\ <\=\ a.length)}\r\n
comment33.params=a\ lo\ hi
comment33.target=void\ shuffle(int[],\ int,\ int)
comment33.text=\r\n\ Rearranges\ the\ elements\ of\ the\ specified\ subarray\ in\ uniformly\ random\ order.\r\n\r\n\ @param\ \ a\ the\ array\ to\ shuffle\r\n\ @param\ \ lo\ the\ left\ endpoint\ (inclusive)\r\n\ @param\ \ hi\ the\ right\ endpoint\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ a}\ is\ {@code\ null}\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ (0\ <\=\ lo)\ &&\ (lo\ <\ hi)\ &&\ (hi\ <\=\ a.length)}\r\n
comment34.params=n
comment34.target=int[]\ permutation(int)
comment34.text=\r\n\ Returns\ a\ uniformly\ random\ permutation\ of\ <em>n</em>\ elements.\r\n\r\n\ @param\ \ n\ number\ of\ elements\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n}\ is\ negative\r\n\ @return\ an\ array\ of\ length\ {@code\ n}\ that\ is\ a\ uniformly\ random\ permutation\r\n\ \ \ \ \ \ \ \ \ of\ {@code\ 0},\ {@code\ 1},\ ...,\ {@code\ n-1}\r\n
comment35.params=n\ k
comment35.target=int[]\ permutation(int,\ int)
comment35.text=\r\n\ Returns\ a\ uniformly\ random\ permutation\ of\ <em>k</em>\ of\ <em>n</em>\ elements.\r\n\r\n\ @param\ \ n\ number\ of\ elements\r\n\ @param\ \ k\ number\ of\ elements\ to\ select\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n}\ is\ negative\r\n\ @throws\ IllegalArgumentException\ unless\ {@code\ 0\ <\=\ k\ <\=\ n}\r\n\ @return\ an\ array\ of\ length\ {@code\ k}\ that\ is\ a\ uniformly\ random\ permutation\r\n\ \ \ \ \ \ \ \ \ of\ {@code\ k}\ of\ the\ elements\ from\ {@code\ 0},\ {@code\ 1},\ ...,\ {@code\ n-1}\r\n
comment36.params=x
comment36.target=void\ validateNotNull(java.lang.Object)
comment37.params=lo\ hi\ length
comment37.target=void\ validateSubarrayIndices(int,\ int,\ int)
comment38.params=args
comment38.target=void\ main(java.lang.String[])
comment38.text=\r\n\ Unit\ tests\ the\ methods\ in\ this\ class.\r\n\r\n\ @param\ args\ the\ command-line\ arguments\r\n
comment4.params=
comment4.target=double\ uniform()
comment4.text=\r\n\ Returns\ a\ random\ real\ number\ uniformly\ in\ [0,\ 1).\r\n\r\n\ @return\ a\ random\ real\ number\ uniformly\ in\ [0,\ 1)\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformDouble()}.\r\n
comment5.params=
comment5.target=double\ uniformDouble()
comment5.text=\r\n\ Returns\ a\ random\ real\ number\ uniformly\ in\ [0,\ 1).\r\n\r\n\ @return\ a\ random\ real\ number\ uniformly\ in\ [0,\ 1)\r\n
comment6.params=n
comment6.target=int\ uniform(int)
comment6.text=\r\n\ Returns\ a\ random\ integer\ uniformly\ in\ [0,\ n).\r\n\r\n\ @param\ n\ number\ of\ possible\ integers\r\n\ @return\ a\ random\ integer\ uniformly\ between\ 0\ (inclusive)\ and\ {@code\ n}\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n\ <\=\ 0}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformInt(int\ n)}.\r\n
comment7.params=n
comment7.target=int\ uniformInt(int)
comment7.text=\r\n\ Returns\ a\ random\ integer\ uniformly\ in\ [0,\ n).\r\n\r\n\ @param\ n\ number\ of\ possible\ integers\r\n\ @return\ a\ random\ integer\ uniformly\ between\ 0\ (inclusive)\ and\ {@code\ n}\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n\ <\=\ 0}\r\n
comment8.params=n
comment8.target=long\ uniform(long)
comment8.text=\r\n\ Returns\ a\ random\ long\ integer\ uniformly\ in\ [0,\ n).\r\n\r\n\ @param\ n\ number\ of\ possible\ {@code\ long}\ integers\r\n\ @return\ a\ random\ long\ integer\ uniformly\ between\ 0\ (inclusive)\ and\ {@code\ n}\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n\ <\=\ 0}\r\n\ @deprecated\ Replaced\ by\ {@link\ \#uniformLong(long\ n)}.\r\n
comment9.params=n
comment9.target=long\ uniformLong(long)
comment9.text=\r\n\ Returns\ a\ random\ long\ integer\ uniformly\ in\ [0,\ n).\r\n\r\n\ @param\ n\ number\ of\ possible\ {@code\ long}\ integers\r\n\ @return\ a\ random\ long\ integer\ uniformly\ between\ 0\ (inclusive)\ and\ {@code\ n}\ (exclusive)\r\n\ @throws\ IllegalArgumentException\ if\ {@code\ n\ <\=\ 0}\r\n
numComments=39
